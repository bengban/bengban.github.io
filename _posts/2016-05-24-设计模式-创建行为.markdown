---
layout: post
title: 设计模式-创建行为
date: 2016-10-31
tags: 设计模式
---

行为设计

  ``` swift
	protocol Decimal {
	func stringValue() -> String
		// factory
		static func make(string : String) -> Decimal
	}

	typealias NumberFactory = (String) -> Decimal

	// Number implementations with factory methods

	struct NextStepNumber : Decimal {
	    private var nextStepNumber : NSNumber

	    func stringValue() -> String { return nextStepNumber.stringValue }
	    
	    // factory
	    static func make(string : String) -> Decimal {
	        return NextStepNumber(nextStepNumber:NSNumber(longLong:(string as NSString).longLongValue))
	    }
	}

	struct SwiftNumber : Decimal {
	    private var swiftInt : Int

	    func stringValue() -> String { return "\(swiftInt)" }
	    
	    // factory
	    static func make(string : String) -> Decimal {
	        return SwiftNumber(swiftInt:(string as NSString).integerValue)
	    }
	}
	/*:
	Abstract factory
	*/
  ```

1.抽象工厂（Abstract Factory）

* 提供一个创建一系列相关或相互依赖对象的接口，而无须指定它们的具体类。
  
  ``` swift
  	enum NumberType {
    	case NextStep, Swift
	}

	enum NumberHelper {
	    static func factoryFor(type : NumberType) -> NumberFactory {
	        switch type {
	        case .NextStep:
	            return NextStepNumber.make
	        case .Swift:
	            return SwiftNumber.make
	        }
	    }
	}
	/*:
	### Usage
	*/
	let factoryOne = NumberHelper.factoryFor(.NextStep)
	let numberOne = factoryOne("1")
	numberOne.stringValue()

	let factoryTwo = NumberHelper.factoryFor(.Swift)
	let numberTwo = factoryTwo("2")
	numberTwo.stringValue()
  ```

2.建造模式（Builder）

* 将一个复杂对象的构建与他的表示相分离，使得同样的构建过程可以创建不同的表示。

  ``` swift 
	class DeathStarBuilder {

	    var x: Double?
	    var y: Double?
	    var z: Double?

	    typealias BuilderClosure = (DeathStarBuilder) -> ()

	    init(buildClosure: BuilderClosure) {
	        buildClosure(self)
	    }
	}

	struct DeathStar : CustomStringConvertible {

	    let x: Double
	    let y: Double
	    let z: Double

	    init?(builder: DeathStarBuilder) {

	        if let x = builder.x, y = builder.y, z = builder.z {
	            self.x = x
	            self.y = y
	            self.z = z
	        } else {
	            return nil
	        }
	    }

	    var description:String {
	        return "Death Star at (x:\(x) y:\(y) z:\(z))"
	    }
	}
	/*:
	### Usage
	*/
	let empire = DeathStarBuilder { builder in
	    builder.x = 0.1
	    builder.y = 0.2
	    builder.z = 0.3
	}

	let deathStar = DeathStar(builder:empire)
  ```

3.工厂方法（Factory Method）

* 定义一个用于创建对象的接口，让子类决定实例化哪一个类，Factory为一个产品族提供了统一的创建接口。

  ``` swift
	protocol Currency {
	    func symbol() -> String
	    func code() -> String
	}

	class Euro : Currency {
	    func symbol() -> String {
	        return "€"
	    }
	    
	    func code() -> String {
	        return "EUR"
	    }
	}

	class UnitedStatesDolar : Currency {
	    func symbol() -> String {
	        return "$"
	    }
	    
	    func code() -> String {
	        return "USD"
	    }
	}

	enum Country {
	    case UnitedStates, Spain, UK, Greece
	}

	enum CurrencyFactory {
	    static func currencyForCountry(country:Country) -> Currency? {

	        switch country {
	            case .Spain, .Greece :
	                return Euro()
	            case .UnitedStates :
	                return UnitedStatesDolar()
	            default:
	                return nil
	        }
	        
	    }
	}
	/*:
	### Usage
	*/
	let noCurrencyCode = "No Currency Code Available"

	CurrencyFactory.currencyForCountry(.Greece)?.code() ?? noCurrencyCode
	CurrencyFactory.currencyForCountry(.Spain)?.code() ?? noCurrencyCode
	CurrencyFactory.currencyForCountry(.UnitedStates)?.code() ?? noCurrencyCode
	CurrencyFactory.currencyForCountry(.UK)?.code() ?? noCurrencyCode
  ```

4.原型模式（Prototype）

* 用原型实例指定创建对象的种类，并且通过拷贝这些原型来创建新的对象。

  ``` swift
	class ChungasRevengeDisplay {
	    var name: String?
	    let font: String

	    init(font: String) {
	        self.font = font
	    }

	    func clone() -> ChungasRevengeDisplay {
	        return ChungasRevengeDisplay(font:self.font)
	    }
	}
	/*:
	### Usage
	*/
	let Prototype = ChungasRevengeDisplay(font:"GotanProject")

	let Philippe = Prototype.clone()
	Philippe.name = "Philippe"

	let Christoph = Prototype.clone()
	Christoph.name = "Christoph"

	let Eduardo = Prototype.clone()
	Eduardo.name = "Eduardo"
  ```

5.单例模式（Singleton）

* 保证一个类只有一个实例，并提供一个访问它的全局访问点。

  ``` swift
	class DeathStarSuperlaser {
	    static let sharedInstance = DeathStarSuperlaser()

	    private init() {
	        // Private initialization to ensure just one instance is created.
	    }
	}
	/*:
	### Usage:
	*/
	let laser = DeathStarSuperlaser.sharedInstance
  ```
