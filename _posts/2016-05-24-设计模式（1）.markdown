---
layout: post
title: 设计模式（1）
date: 2016-10-31
tags: 设计模式
---

行为设计

1.职责链模式（Chain Of Responsibility）
---The chain of responsibility pattern is used to process varied requests, each of which may be dealt with by a different handler.

  ``` swift
    class MoneyPile {
	    let value: Int
	    var quantity: Int
	    var nextPile: MoneyPile?
	    
	    init(value: Int, quantity: Int, nextPile: MoneyPile?) {
	        self.value = value
	        self.quantity = quantity
	        self.nextPile = nextPile
	    }
	    
	    func canWithdraw(v: Int) -> Bool {

	        var v = v

	        func canTakeSomeBill(want: Int) -> Bool {
	            return (want / self.value) > 0
	        }
	        
	        var q = self.quantity

	        while canTakeSomeBill(v) {

	            if q == 0 {
	                break
	            }

	            v -= self.value
	            q -= 1
	        }

	        if v == 0 {
	            return true
	        } else if let next = self.nextPile {
	            return next.canWithdraw(v)
	        }

	        return false
	    }
	}

	class ATM {
	    private var hundred: MoneyPile
	    private var fifty: MoneyPile
	    private var twenty: MoneyPile
	    private var ten: MoneyPile
	    
	    private var startPile: MoneyPile {
	        return self.hundred
	    }
	    
	    init(hundred: MoneyPile, 
	           fifty: MoneyPile, 
	          twenty: MoneyPile, 
	             ten: MoneyPile) {

	        self.hundred = hundred
	        self.fifty = fifty
	        self.twenty = twenty
	        self.ten = ten
	    }
	    
	    func canWithdraw(value: Int) -> String {
	        return "Can withdraw: \(self.startPile.canWithdraw(value))"
	    }
	}
	
	/*:
	### Usage
	*/
	// Create piles of money and link them together 10 < 20 < 50 < 100.**
	let ten = MoneyPile(value: 10, quantity: 6, nextPile: nil)
	let twenty = MoneyPile(value: 20, quantity: 2, nextPile: ten)
	let fifty = MoneyPile(value: 50, quantity: 2, nextPile: twenty)
	let hundred = MoneyPile(value: 100, quantity: 1, nextPile: fifty)

	// Build ATM.
	var atm = ATM(hundred: hundred, fifty: fifty, twenty: twenty, ten: ten)
	atm.canWithdraw(310) // Cannot because ATM has only 300
	atm.canWithdraw(100) // Can withdraw - 1x100
	atm.canWithdraw(165) // Cannot withdraw because ATM doesn't has bill with value of 5
	atm.canWithdraw(30)  // Can withdraw - 1x20, 2x10
  ```

2.命令模式（Command）
将一个请求封装为一个对象，从而使你可以用不同的请求对客户进行参数化，对请求排队和记录请求日志，以及支持可撤销的操作

	``` swift
	protocol DoorCommand {
	    func execute() -> String
	}

	class OpenCommand : DoorCommand {
	    let doors:String

	    required init(doors: String) {
	        self.doors = doors
	    }
	    
	    func execute() -> String {
	        return "Opened \(doors)"
	    }
	}

	class CloseCommand : DoorCommand {
	    let doors:String

	    required init(doors: String) {
	        self.doors = doors
	    }
	    
	    func execute() -> String {
	        return "Closed \(doors)"
	    }
	}

	class HAL9000DoorsOperations {
	    let openCommand: DoorCommand
	    let closeCommand: DoorCommand
	    
	    init(doors: String) {
	        self.openCommand = OpenCommand(doors:doors)
	        self.closeCommand = CloseCommand(doors:doors)
	    }
	    
	    func close() -> String {
	        return closeCommand.execute()
	    }
	    
	    func open() -> String {
	        return openCommand.execute()
	    }
	}
	```

	``` swift
	/*:
	### Usage:
	*/
	let podBayDoors = "Pod Bay Doors"
	let doorModule = HAL9000DoorsOperations(doors:podBayDoors)

	doorModule.open()
	doorModule.close()
	```

3.观察者模式（Observer）
定义对象间一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知自动更新

	``` swift
	protocol PropertyObserver : class {
	    func willChangePropertyName(propertyName:String, newPropertyValue:AnyObject?)
	    func didChangePropertyName(propertyName:String, oldPropertyValue:AnyObject?)
	}

	class TestChambers {

	    weak var observer:PropertyObserver?

	    var testChamberNumber: Int = 0 {
	        willSet(newValue) {
	            observer?.willChangePropertyName("testChamberNumber", newPropertyValue:newValue)
	        }
	        didSet {
	            observer?.didChangePropertyName("testChamberNumber", oldPropertyValue:oldValue)
	        }
	    }
	}

	class Observer : PropertyObserver {
	    func willChangePropertyName(propertyName: String, newPropertyValue: AnyObject?) {
	        if newPropertyValue as? Int == 1 {
	            print("Okay. Look. We both said a lot of things that you're going to regret.")
	        }
	    }

	    func didChangePropertyName(propertyName: String, oldPropertyValue: AnyObject?) {
	        if oldPropertyValue as? Int == 0 {
	            print("Sorry about the mess. I've really let the place go since you killed me.")
	        }
	    }
	}
	```

	``` swift
	/*:
	### Usage
	*/
	var observerInstance = Observer()
	var testChambers = TestChambers()
	testChambers.observer = observerInstance
	testChambers.testChamberNumber++
	/*:
	>**Further Examples:** [Design Patterns in Swift](https://github.com/kingreza/Swift-Observer)
	*/
	```
4.策略模式（Strategy）
定义一系列的算法，把他们一个个封装起来，并使他们可以互相替换，本模式使得算法可以独立于使用它们的客户

	```swift
	protocol PrintStrategy {
	    func printString(string: String) -> String
	}

	class Printer {

	    let strategy: PrintStrategy
	    
	    func printString(string: String) -> String {
	        return self.strategy.printString(string)
	    }
	    
	    init(strategy: PrintStrategy) {
	        self.strategy = strategy
	    }
	}

	class UpperCaseStrategy : PrintStrategy {
	    func printString(string:String) -> String {
	        return string.uppercaseString
	    }
	}

	class LowerCaseStrategy : PrintStrategy {
	    func printString(string:String) -> String {
	        return string.lowercaseString
	    }
	}

	```

	```swift
	/*:
	### Usage
	*/
	var lower = Printer(strategy:LowerCaseStrategy())
	lower.printString("O tempora, o mores!")

	var upper = Printer(strategy:UpperCaseStrategy())
	upper.printString("O tempora, o mores!")
	/*:
	>**Further Examples:** [Design Patterns in Swift](https://github.com/kingreza/Swift-Strategy)
	*/
	```

5.访问者模式
表示一个作用于某对象结构中的各元素的操作，它使你可以在不改变各元素类的前提下定义作用于这个元素的新操作

	```swift
		protocol PlanetVisitor {
			func visit(planet: PlanetAlderaan)
			func visit(planet: PlanetCoruscant)
			func visit(planet: PlanetTatooine)
		}

		protocol Planet {
			func accept(visitor: PlanetVisitor)
		}

		class PlanetAlderaan: Planet {
			func accept(visitor: PlanetVisitor) { visitor.visit(self) }
		}
		class PlanetCoruscant: Planet {
			func accept(visitor: PlanetVisitor) { visitor.visit(self) }
		}
		class PlanetTatooine: Planet {
			func accept(visitor: PlanetVisitor) { visitor.visit(self) }
		}

		class NameVisitor: PlanetVisitor {
			var name = ""

			func visit(planet: PlanetAlderaan)  { name = "Alderaan" }
			func visit(planet: PlanetCoruscant) { name = "Coruscant" }
			func visit(planet: PlanetTatooine)  { name = "Tatooine" }
		}
	```

	```swift
		/*:
		### Usage
		*/
		let planets: [Planet] = [PlanetAlderaan(), PlanetCoruscant(), PlanetTatooine()]

		let names = planets.map { (planet: Planet) -> String in
			let visitor = NameVisitor()
			planet.accept(visitor)
			return visitor.name
		}

		names
	```


